<div class="container">
<h1 class="display-5 m-5">Carrinho de Compras</h1>

<% if session[:cart]&.any? %>
  <table class="table">
    <thead>
      <tr>
        <th>Produto</th>
        <th>Pre√ßo Unit√°rio</th>
        <th>Categoria</th>
      </tr>
    </thead>
    <tbody>
      <% preco_total = 0 %>
      <% pedidos = [] %>
      <% session[:cart].each do |product_id, quantity| %>
        <% product = Product.find(product_id) %>
        <tr>
          <td><%= product.name %></td>
          <td>R$<%= product.price.round(2) %></td>
          <td><%= product.category %></td>
          <% preco_total += product.price %>
          <% pedidos << product %>
        </tr>
      <% end %>
    </tbody>
  </table>
  <div class="row pt-3">
  <div class="col-6">
  <p><strong>Total: R$</strong><%= preco_total.round(2) %></p>
  </div>
  <div class="col-6 text-end">
  <%= button_to "Finalizar Compra", salvar_pedido_path(pedidos: pedidos), method: :post, class: "btn btn-success" %>
  </div>
  </div>
  <% else %>
  <p>Seu carrinho est√° vazio.</p>
  <% end %>
  </div>

  <script src="https://sdk.mercadopago.com/js/v2">
  </script>
   <div id="paymentBrick_container">
  </div>
  <script>
  const mp = new MercadoPago('TEST-e373d851-9f84-40fb-a3bd-05970e0d2c4b', {
    locale: 'pt'
  });
  const bricksBuilder = mp.bricks();
    const renderPaymentBrick = async (bricksBuilder) => {
      const settings = {
        initialization: {
          amount: <%= preco_total.round(2) %>,
          payer: {
            firstName: "Everton",
            lastName: "Leon",
            email: "",
          },
        },
        customization: {
          visual: {
            style: {
              theme: "default",
            },
          },
          paymentMethods: {
            creditCard: "all",
										atm: "all",
            maxInstallments: 1
          },
        },
        callbacks: {
          onReady: () => {
            console.log("Brick ready");
          },
          onSubmit: ({ selectedPaymentMethod, formData }) => {
            console.log("üì§ Enviando para /process_payment:", JSON.stringify(formData, null, 2));
            return new Promise((resolve, reject) => {
              fetch("/process_payment", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
              })
                .then((response) => response.json())
                .then((response) => {
                  console.log("Resposta do servidor:", response);
                    console.log("Resposta do servidor:", response.redirect_url);
                    alert("Pagamento realizado com sucesso!");
                    window.location.href = response.redirect_url;
                  resolve();
                })
                .catch((error) => {
                  console.error("Erro no pagamento:", error);
                  reject();
                });
            });
          },
          onError: (error) => {
            console.error(error);
          },
        },
      };
      window.paymentBrickController = await bricksBuilder.create(
        "payment",
        "paymentBrick_container",
        settings
      );
    };
    renderPaymentBrick(bricksBuilder);
  </script>
</body>